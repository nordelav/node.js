import http from"node:http";import express from"express";import helmet from"helmet";import cors from"cors";import compression from"compression";import"express-rate-limit";import morgan from"morgan";import pino from"pino-http";import"dotenv/config";import{z}from"zod";var DEFAULT_PORT=8080,DEFAULT_ENV="development",numberStringSchema=def=>z.coerce.number().default(def).transform(String),schema=z.object({PORT:numberStringSchema(DEFAULT_PORT),NODE_ENV:z.enum(["development","production","test"]).default(DEFAULT_ENV)}),parsed=schema.parse(process.env),config={port:parsed.PORT,env:parsed.NODE_ENV,baseUrl:`http://localhost:${parsed.PORT}`,appName:"Coffee Brew Api",appVersion:"1.0.1"};import{createContainer,asClass}from"awilix";import{nanoid}from"nanoid";var BrewsModel=class{static scope="singleton";#brewStorage=new Map;constructor(){console.log("BrewStorage initialized")}all(){return[...this.#brewStorage.values()]}find(id){return this.#brewStorage.get(id)??null}create(dto){let id=nanoid(8),brew={id,...dto};return console.log(brew),this.#brewStorage.set(id,brew),brew}update(id,dto){if(!this.#brewStorage.has(id))return null;let brew={id,...dto};return this.#brewStorage.set(id,brew),brew}remove(id){return this.#brewStorage.delete(id)}};var BrewsController=class{static scope="scoped";constructor(brewsService){console.log("BrewsController inititalized"),this.brewsService=brewsService}list=(req,res)=>res.json(this.brewsService.getAll(req.query));show=(req,res)=>res.json(this.brewsService.getOne(req.params.id));create=(req,res)=>res.status(201).json(this.brewsService.create(req.body));update=(req,res)=>res.json(this.brewsService.update(req.params.id,req.body));remove=(req,res)=>{this.brewsService.delete(req.params.id),res.status(204).end()}};var BrewsService=class{static scope="scoped";constructor(brewsModel){console.log("BrewsService initalized"),this.brewsModel=brewsModel}getAll({method,ratingMin}={}){let data=this.brewsModel.all(),min=ratingMin!=null?Number(ratingMin):null,out=data;if(min!=null&&!Number.isNaN(min)&&(out=out.filter(b=>{let rating=b.rating??b.Rating;return typeof rating=="number"&&rating>=min})),method){let m=b=>b.method??b.Method;out=out.filter(b=>m(b)===method)}return out}getOne(id){let user=this.brewsModel.find(id);if(!user)throw Object.assign(new Error("Brews not found"),{status:404});return user}create(dto){return this.brewsModel.create(dto)}update(id,dto){let user=this.brewsModel.update(id,dto);if(!user)throw Object.assign(new Error("Brew not found"),{status:404});return user}delete(id){if(!this.brewsModel.remove(id))throw Object.assign(new Error("Brew not found"),{status:404})}};var objectMap=(obj,fn)=>{if(typeof obj!="object"||obj===null)throw new TypeError("Expected an object");if(typeof fn!="function")throw new TypeError("Expected a function");return Object.entries(obj).reduce((acc,[key,value])=>(acc[key]=fn(value,key,obj),acc),{})};var brewsModule={brewsModel:BrewsModel,brewsService:BrewsService,BrewsController},container=createContainer({injectionMode:"CLASSIC"}).register(objectMap(brewsModule,value=>asClass(value)[value.scope]()));import{scopePerRequest}from"awilix-express";import swaggerUi from"swagger-ui-express";function mergeSpecs(target,source){if(target.paths=Object.assign({},target.paths,source.paths),target.components??={},target.components.schemas??={},source.components?.schemas&&(target.components.schemas=Object.assign({},target.components.schemas,source.components.schemas)),source.tags){let tagNames=new Set(target.tags?.map(t=>t.name)??[]);target.tags=[...target.tags??[],...source.tags.filter(t=>!tagNames.has(t.name))]}return target}import{extendZodWithOpenApi,OpenAPIRegistry}from"@asteasolutions/zod-to-openapi";import{z as z2}from"zod";extendZodWithOpenApi(z2);globalThis.registry??=new OpenAPIRegistry;var registry=globalThis.registry;import{OpenApiGeneratorV3}from"@asteasolutions/zod-to-openapi";import{dirname}from"node:path";import{fileURLToPath}from"node:url";var __dirname=dirname(fileURLToPath(import.meta.url)),createZodSpec=()=>{let zodSpec=new OpenApiGeneratorV3(registry.definitions).generateDocument({info:{title:config.appName,version:config.appVersion}});return zodSpec.paths={...zodSpec.paths},zodSpec.components={...zodSpec.components,schemas:{...zodSpec.components.schemas}},zodSpec};import swaggerJSDoc from"swagger-jsdoc";var jsdocSpec=swaggerJSDoc({definition:{openapi:"3.0.0",info:{title:config.appName,version:config.appVersion}},apis:["./src/routes/**/*.js"]});var generateSpecs=()=>mergeSpecs(jsdocSpec,createZodSpec());function notFound(_req,res,_next){res.status(404).json({error:"Route not found"})}var errorHandler=(err,req,res,_next)=>{console.error(err),req.log.error({err}),res.status(err.status||500).json({error:err.message||"Server error"})};import{Router}from"express";import{z as z4}from"zod";import{makeClassInvoker}from"awilix-express";import rateLimit from"express-rate-limit";import{z as z3}from"zod";var BrewDTO=z3.object({Beans:z3.string().min(3).max(40),Method:z3.enum(["v60","aeropress","chemex","espresso"]),Rating:z3.optional(z3.number().min(0).max(5)),Notes:z3.optional(z3.string().max(200)),BrewedAt:z3.optional(z3.string().datetime()).default(new Date().toISOString())});registry.register("Brew",BrewDTO);var validateParams=schema2=>(req,res,next)=>{let result=schema2.safeParse(req.params);if(!result.success)return res.status(400).json({errors:result.error.format(),where:"params"});req.params=result.data,next()};var asyncHandler=fn=>(req,res,next)=>Promise.resolve(fn(req,res,next)).catch(next);var validate=schema2=>(req,res,next)=>{let result=schema2.safeParse(req.body);if(!result.success)return res.status(400).json({errors:result.error.format()});req.body=result.data,next()};var router=Router(),ctl=makeClassInvoker(BrewsController),paramsSchema=z4.object({id:z4.string().describe("User ID")}),querySchema=z4.object({method:z4.enum(["v60","aeropress","chemex","espresso"]).optional(),rating:z4.optional(z4.number().min(0).max(5)).optional()}),postLimit=rateLimit({windowMs:60*1e3,max:10,message:"Too many POST requests from this IP, please try again after 60 seconds.",headers:!0});router.get("/brews",validateParams(querySchema),ctl("list"));registry.registerPath({method:"get",path:"/api/brews",tags:["Brews"],request:{query:querySchema},responses:{200:{description:"List of coffee brews",content:{"application/json":{schema:z4.array(BrewDTO)}}}}});router.get("/brews/:id",validateParams(paramsSchema),ctl("show"));registry.registerPath({method:"get",path:"/api/brews/{id}",tags:["Brews"],request:{params:paramsSchema},responses:{200:{description:"User",content:{"application/json":{schema:BrewDTO}}},404:{description:"User not found"}}});router.post("/brews",validate(BrewDTO),postLimit,asyncHandler(ctl("create")));registry.registerPath({method:"post",path:"/api/brews",tags:["Brews"],request:{body:{required:!0,content:{"application/json":{schema:BrewDTO}}}},responses:{201:{description:"Created",content:{"application/json":{schema:BrewDTO}}},400:{description:"Validation error"},429:{description:"Too many POST requests from this IP, please try again after 60 seconds."}}});router.put("/brews/:id",validateParams(paramsSchema),validate(BrewDTO),asyncHandler(ctl("update")));registry.registerPath({method:"put",path:"/api/brews/{id}",tags:["Brews"],request:{params:paramsSchema,body:{required:!0,content:{"application/json":{schema:BrewDTO}}}},responses:{200:{description:"Updated user",content:{"application/json":{schema:BrewDTO}}},400:{description:"Validation error"},404:{description:"User not found"}}});router.delete("/brews/:id",asyncHandler(ctl("remove")));registry.registerPath({method:"delete",path:"/api/brews/{id}",tags:["Brews"],request:{params:paramsSchema},responses:{204:{description:"Deleted"},404:{description:"User not found"}}});function createApp(){let app2=express();return app2.use(helmet()),app2.use(cors()),app2.use(compression()),app2.use(morgan("dev")),app2.use(pino()),app2.use(express.json()),app2.use(express.urlencoded({extended:!1})),app2.use(scopePerRequest(container)),config.env==="development"&&(app2.use("/docs",swaggerUi.serve,swaggerUi.setup(generateSpecs())),console.log(`Swagger docs \u2192 ${config.baseUrl}/docs`)),app2.use("/api",router),app2.use(notFound),app2.use(errorHandler),app2}var app=createApp(),server=http.createServer(app);server.listen(config.port,()=>console.log(`Started at ${config.env}}. API ready on on http://localhost:${config.port}`));
